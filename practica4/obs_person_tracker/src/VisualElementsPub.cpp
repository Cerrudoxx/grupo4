//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `VisualElementsPub.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <VisualElementsPub.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_RoboCompVisualElementsPub_VisualElementsPub_ids[2] =
{
    "::Ice::Object",
    "::RoboCompVisualElementsPub::VisualElementsPub"
};
const ::std::string iceC_RoboCompVisualElementsPub_VisualElementsPub_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setVisualObjects"
};
const ::std::string iceC_RoboCompVisualElementsPub_VisualElementsPub_setVisualObjects_name = "setVisualObjects";

}

bool
RoboCompVisualElementsPub::VisualElementsPub::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompVisualElementsPub_VisualElementsPub_ids, iceC_RoboCompVisualElementsPub_VisualElementsPub_ids + 2, s);
}

::std::vector<::std::string>
RoboCompVisualElementsPub::VisualElementsPub::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompVisualElementsPub_VisualElementsPub_ids[0], &iceC_RoboCompVisualElementsPub_VisualElementsPub_ids[2]);
}

::std::string
RoboCompVisualElementsPub::VisualElementsPub::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompVisualElementsPub::VisualElementsPub::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompVisualElementsPub::VisualElementsPub";
    return typeId;
}

/// \cond INTERNAL
bool
RoboCompVisualElementsPub::VisualElementsPub::_iceD_setVisualObjects(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    TData iceP_data;
    istr->readAll(iceP_data);
    inS.endReadParams();
    this->setVisualObjects(::std::move(iceP_data), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
RoboCompVisualElementsPub::VisualElementsPub::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompVisualElementsPub_VisualElementsPub_ops, iceC_RoboCompVisualElementsPub_VisualElementsPub_ops + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompVisualElementsPub_VisualElementsPub_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_setVisualObjects(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
RoboCompVisualElementsPub::VisualElementsPubPrx::_iceI_setVisualObjects(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const TData& iceP_data, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompVisualElementsPub_VisualElementsPub_setVisualObjects_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_data);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
RoboCompVisualElementsPub::VisualElementsPubPrx::_newInstance() const
{
    return ::IceInternal::createProxy<VisualElementsPubPrx>();
}
/// \endcond

const ::std::string&
RoboCompVisualElementsPub::VisualElementsPubPrx::ice_staticId()
{
    return VisualElementsPub::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompVisualElementsPub_VisualElementsPub_setVisualObjects_name = "setVisualObjects";

}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::RoboCompVisualElementsPub::upCast(VisualElementsPub* p) { return p; }

void
::IceProxy::RoboCompVisualElementsPub::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< VisualElementsPub>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new VisualElementsPub;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::RoboCompVisualElementsPub::VisualElementsPub::_iceI_begin_setVisualObjects(const ::RoboCompVisualElementsPub::TData& iceP_data, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompVisualElementsPub_VisualElementsPub_setVisualObjects_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompVisualElementsPub_VisualElementsPub_setVisualObjects_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_data);
        result->endWriteParams();
        result->invoke(iceC_RoboCompVisualElementsPub_VisualElementsPub_setVisualObjects_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompVisualElementsPub::VisualElementsPub::end_setVisualObjects(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompVisualElementsPub_VisualElementsPub_setVisualObjects_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::RoboCompVisualElementsPub::VisualElementsPub::_newInstance() const
{
    return new VisualElementsPub;
}
/// \endcond

const ::std::string&
IceProxy::RoboCompVisualElementsPub::VisualElementsPub::ice_staticId()
{
    return ::RoboCompVisualElementsPub::VisualElementsPub::ice_staticId();
}

RoboCompVisualElementsPub::VisualElementsPub::~VisualElementsPub()
{
}

/// \cond INTERNAL
::Ice::Object* RoboCompVisualElementsPub::upCast(VisualElementsPub* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_RoboCompVisualElementsPub_VisualElementsPub_ids[2] =
{
    "::Ice::Object",
    "::RoboCompVisualElementsPub::VisualElementsPub"
};

}

bool
RoboCompVisualElementsPub::VisualElementsPub::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompVisualElementsPub_VisualElementsPub_ids, iceC_RoboCompVisualElementsPub_VisualElementsPub_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompVisualElementsPub::VisualElementsPub::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompVisualElementsPub_VisualElementsPub_ids[0], &iceC_RoboCompVisualElementsPub_VisualElementsPub_ids[2]);
}

const ::std::string&
RoboCompVisualElementsPub::VisualElementsPub::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompVisualElementsPub::VisualElementsPub::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompVisualElementsPub::VisualElementsPub";
    return typeId;
#else
    return iceC_RoboCompVisualElementsPub_VisualElementsPub_ids[1];
#endif
}

/// \cond INTERNAL
bool
RoboCompVisualElementsPub::VisualElementsPub::_iceD_setVisualObjects(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    TData iceP_data;
    istr->read(iceP_data);
    inS.endReadParams();
    this->setVisualObjects(iceP_data, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_RoboCompVisualElementsPub_VisualElementsPub_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setVisualObjects"
};

}

/// \cond INTERNAL
bool
RoboCompVisualElementsPub::VisualElementsPub::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompVisualElementsPub_VisualElementsPub_all, iceC_RoboCompVisualElementsPub_VisualElementsPub_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompVisualElementsPub_VisualElementsPub_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_setVisualObjects(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
RoboCompVisualElementsPub::VisualElementsPub::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< VisualElementsPub, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompVisualElementsPub::VisualElementsPub::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< VisualElementsPub, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
RoboCompVisualElementsPub::_icePatchObjectPtr(VisualElementsPubPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = VisualElementsPubPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(VisualElementsPub::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
