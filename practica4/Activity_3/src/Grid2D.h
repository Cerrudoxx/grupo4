//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `Grid2D.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Grid2D_h__
#define __Grid2D_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompGrid2D
{

class Grid2D;
class Grid2DPrx;

}

namespace RoboCompGrid2D
{

struct TPoint
{
    float x;
    float y;
    float radius;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(x, y, radius);
    }
};

using TPath = ::std::vector<TPoint>;

struct Result
{
    ::RoboCompGrid2D::TPath path;
    long long int timestamp;
    ::std::string errorMsg;
    bool valid;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::RoboCompGrid2D::TPath&, const long long int&, const ::std::string&, const bool&> ice_tuple() const
    {
        return std::tie(path, timestamp, errorMsg, valid);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompGrid2D
{

class Grid2D : public virtual ::Ice::Object
{
public:

    using ProxyType = Grid2DPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual Result getPaths(TPoint source, TPoint target, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getPaths(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompGrid2D
{

class Grid2DPrx : public virtual ::Ice::Proxy<Grid2DPrx, ::Ice::ObjectPrx>
{
public:

    Result getPaths(const TPoint& source, const TPoint& target, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompGrid2D::Result>(true, this, &Grid2DPrx::_iceI_getPaths, source, target, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPathsAsync(const TPoint& source, const TPoint& target, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompGrid2D::Result>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompGrid2D::Result, P>(false, this, &Grid2DPrx::_iceI_getPaths, source, target, context);
    }

    ::std::function<void()>
    getPathsAsync(const TPoint& source, const TPoint& target,
                  ::std::function<void(::RoboCompGrid2D::Result)> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompGrid2D::Result>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompGrid2D::Grid2DPrx::_iceI_getPaths, source, target, context);
    }

    /// \cond INTERNAL
    void _iceI_getPaths(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompGrid2D::Result>>&, const TPoint&, const TPoint&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    Grid2DPrx() = default;
    friend ::std::shared_ptr<Grid2DPrx> IceInternal::createProxy<Grid2DPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompGrid2D::TPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompGrid2D::TPoint, S>
{
    static void read(S* istr, ::RoboCompGrid2D::TPoint& v)
    {
        istr->readAll(v.x, v.y, v.radius);
    }
};

template<>
struct StreamableTraits<::RoboCompGrid2D::Result>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 11;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompGrid2D::Result, S>
{
    static void read(S* istr, ::RoboCompGrid2D::Result& v)
    {
        istr->readAll(v.path, v.timestamp, v.errorMsg, v.valid);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompGrid2D
{

using Grid2DPtr = ::std::shared_ptr<Grid2D>;
using Grid2DPrxPtr = ::std::shared_ptr<Grid2DPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompGrid2D
{

class Grid2D;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Grid2D>&);
::IceProxy::Ice::Object* upCast(Grid2D*);
/// \endcond

}

}

namespace RoboCompGrid2D
{

class Grid2D;
/// \cond INTERNAL
::Ice::Object* upCast(Grid2D*);
/// \endcond
typedef ::IceInternal::Handle< Grid2D> Grid2DPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompGrid2D::Grid2D> Grid2DPrx;
typedef Grid2DPrx Grid2DPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(Grid2DPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompGrid2D
{

struct TPoint
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float radius;
};

typedef ::std::vector<TPoint> TPath;

struct Result
{
    ::RoboCompGrid2D::TPath path;
    ::Ice::Long timestamp;
    ::std::string errorMsg;
    bool valid;
};

}

namespace RoboCompGrid2D
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompGrid2D::Grid2D::begin_getPaths.
 * Create a wrapper instance by calling ::RoboCompGrid2D::newCallback_Grid2D_getPaths.
 */
class Callback_Grid2D_getPaths_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Grid2D_getPaths_Base> Callback_Grid2D_getPathsPtr;

}

namespace IceProxy
{

namespace RoboCompGrid2D
{

class Grid2D : public virtual ::Ice::Proxy<Grid2D, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompGrid2D::Result getPaths(const ::RoboCompGrid2D::TPoint& source, const ::RoboCompGrid2D::TPoint& target, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getPaths(_iceI_begin_getPaths(source, target, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPaths(const ::RoboCompGrid2D::TPoint& source, const ::RoboCompGrid2D::TPoint& target, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPaths(source, target, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPaths(const ::RoboCompGrid2D::TPoint& source, const ::RoboCompGrid2D::TPoint& target, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPaths(source, target, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPaths(const ::RoboCompGrid2D::TPoint& source, const ::RoboCompGrid2D::TPoint& target, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPaths(source, target, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPaths(const ::RoboCompGrid2D::TPoint& source, const ::RoboCompGrid2D::TPoint& target, const ::RoboCompGrid2D::Callback_Grid2D_getPathsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPaths(source, target, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPaths(const ::RoboCompGrid2D::TPoint& source, const ::RoboCompGrid2D::TPoint& target, const ::Ice::Context& context, const ::RoboCompGrid2D::Callback_Grid2D_getPathsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPaths(source, target, context, cb, cookie);
    }

    ::RoboCompGrid2D::Result end_getPaths(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPaths(const ::RoboCompGrid2D::TPoint&, const ::RoboCompGrid2D::TPoint&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompGrid2D
{

class Grid2D : public virtual ::Ice::Object
{
public:

    typedef Grid2DPrx ProxyType;
    typedef Grid2DPtr PointerType;

    virtual ~Grid2D();

#ifdef ICE_CPP11_COMPILER
    Grid2D() = default;
    Grid2D(const Grid2D&) = default;
    Grid2D& operator=(const Grid2D&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual Result getPaths(const TPoint& source, const TPoint& target, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getPaths(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Grid2D& lhs, const Grid2D& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Grid2D& lhs, const Grid2D& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompGrid2D::TPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 12;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompGrid2D::TPoint, S>
{
    static void write(S* ostr, const ::RoboCompGrid2D::TPoint& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.radius);
    }
};

template<typename S>
struct StreamReader< ::RoboCompGrid2D::TPoint, S>
{
    static void read(S* istr, ::RoboCompGrid2D::TPoint& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.radius);
    }
};

template<>
struct StreamableTraits< ::RoboCompGrid2D::Result>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 11;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompGrid2D::Result, S>
{
    static void write(S* ostr, const ::RoboCompGrid2D::Result& v)
    {
        ostr->write(v.path);
        ostr->write(v.timestamp);
        ostr->write(v.errorMsg);
        ostr->write(v.valid);
    }
};

template<typename S>
struct StreamReader< ::RoboCompGrid2D::Result, S>
{
    static void read(S* istr, ::RoboCompGrid2D::Result& v)
    {
        istr->read(v.path);
        istr->read(v.timestamp);
        istr->read(v.errorMsg);
        istr->read(v.valid);
    }
};

}
/// \endcond

namespace RoboCompGrid2D
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompGrid2D::Grid2D::begin_getPaths.
 * Create a wrapper instance by calling ::RoboCompGrid2D::newCallback_Grid2D_getPaths.
 */
template<class T>
class CallbackNC_Grid2D_getPaths : public Callback_Grid2D_getPaths_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const Result&);

    CallbackNC_Grid2D_getPaths(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Grid2DPrx proxy = Grid2DPrx::uncheckedCast(result->getProxy());
        Result ret;
        try
        {
            ret = proxy->end_getPaths(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGrid2D::Grid2D::begin_getPaths.
 */
template<class T> Callback_Grid2D_getPathsPtr
newCallback_Grid2D_getPaths(const IceUtil::Handle<T>& instance, void (T::*cb)(const Result&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Grid2D_getPaths<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGrid2D::Grid2D::begin_getPaths.
 */
template<class T> Callback_Grid2D_getPathsPtr
newCallback_Grid2D_getPaths(T* instance, void (T::*cb)(const Result&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Grid2D_getPaths<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompGrid2D::Grid2D::begin_getPaths.
 * Create a wrapper instance by calling ::RoboCompGrid2D::newCallback_Grid2D_getPaths.
 */
template<class T, typename CT>
class Callback_Grid2D_getPaths : public Callback_Grid2D_getPaths_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const Result&, const CT&);

    Callback_Grid2D_getPaths(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Grid2DPrx proxy = Grid2DPrx::uncheckedCast(result->getProxy());
        Result ret;
        try
        {
            ret = proxy->end_getPaths(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGrid2D::Grid2D::begin_getPaths.
 */
template<class T, typename CT> Callback_Grid2D_getPathsPtr
newCallback_Grid2D_getPaths(const IceUtil::Handle<T>& instance, void (T::*cb)(const Result&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Grid2D_getPaths<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompGrid2D::Grid2D::begin_getPaths.
 */
template<class T, typename CT> Callback_Grid2D_getPathsPtr
newCallback_Grid2D_getPaths(T* instance, void (T::*cb)(const Result&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Grid2D_getPaths<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
