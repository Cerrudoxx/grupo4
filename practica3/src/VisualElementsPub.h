//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `VisualElementsPub.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __VisualElementsPub_h__
#define __VisualElementsPub_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Camera360RGB.h>
#include <Lidar3D.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompVisualElementsPub
{

class VisualElementsPub;
class VisualElementsPubPrx;

}

namespace RoboCompVisualElementsPub
{

using TAttributes = ::std::map<::std::string, ::std::string>;

struct TObject
{
    int id;
    int type;
    ::RoboCompCamera360RGB::TImage image;
    ::RoboCompVisualElementsPub::TAttributes attributes;
    ::RoboCompLidar3D::TDataImage maskpoints;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const int&, const int&, const ::RoboCompCamera360RGB::TImage&, const ::RoboCompVisualElementsPub::TAttributes&, const ::RoboCompLidar3D::TDataImage&> ice_tuple() const
    {
        return std::tie(id, type, image, attributes, maskpoints);
    }
};

using TObjects = ::std::vector<TObject>;

struct TData
{
    ::std::string publisher;
    ::RoboCompVisualElementsPub::TObjects objects;
    long long int timestampimage;
    long long int timestampgenerated;
    float period;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::std::string&, const ::RoboCompVisualElementsPub::TObjects&, const long long int&, const long long int&, const float&> ice_tuple() const
    {
        return std::tie(publisher, objects, timestampimage, timestampgenerated, period);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompVisualElementsPub
{

class VisualElementsPub : public virtual ::Ice::Object
{
public:

    using ProxyType = VisualElementsPubPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void setVisualObjects(TData data, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_setVisualObjects(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompVisualElementsPub
{

class VisualElementsPubPrx : public virtual ::Ice::Proxy<VisualElementsPubPrx, ::Ice::ObjectPrx>
{
public:

    void setVisualObjects(const TData& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &VisualElementsPubPrx::_iceI_setVisualObjects, data, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setVisualObjectsAsync(const TData& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &VisualElementsPubPrx::_iceI_setVisualObjects, data, context);
    }

    ::std::function<void()>
    setVisualObjectsAsync(const TData& data,
                          ::std::function<void()> response,
                          ::std::function<void(::std::exception_ptr)> ex = nullptr,
                          ::std::function<void(bool)> sent = nullptr,
                          const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompVisualElementsPub::VisualElementsPubPrx::_iceI_setVisualObjects, data, context);
    }

    /// \cond INTERNAL
    void _iceI_setVisualObjects(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const TData&, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    VisualElementsPubPrx() = default;
    friend ::std::shared_ptr<VisualElementsPubPrx> IceInternal::createProxy<VisualElementsPubPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompVisualElementsPub::TObject>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 84;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompVisualElementsPub::TObject, S>
{
    static void read(S* istr, ::RoboCompVisualElementsPub::TObject& v)
    {
        istr->readAll(v.id, v.type, v.image, v.attributes, v.maskpoints);
    }
};

template<>
struct StreamableTraits<::RoboCompVisualElementsPub::TData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 22;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompVisualElementsPub::TData, S>
{
    static void read(S* istr, ::RoboCompVisualElementsPub::TData& v)
    {
        istr->readAll(v.publisher, v.objects, v.timestampimage, v.timestampgenerated, v.period);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompVisualElementsPub
{

using VisualElementsPubPtr = ::std::shared_ptr<VisualElementsPub>;
using VisualElementsPubPrxPtr = ::std::shared_ptr<VisualElementsPubPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompVisualElementsPub
{

class VisualElementsPub;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< VisualElementsPub>&);
::IceProxy::Ice::Object* upCast(VisualElementsPub*);
/// \endcond

}

}

namespace RoboCompVisualElementsPub
{

class VisualElementsPub;
/// \cond INTERNAL
::Ice::Object* upCast(VisualElementsPub*);
/// \endcond
typedef ::IceInternal::Handle< VisualElementsPub> VisualElementsPubPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompVisualElementsPub::VisualElementsPub> VisualElementsPubPrx;
typedef VisualElementsPubPrx VisualElementsPubPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(VisualElementsPubPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompVisualElementsPub
{

typedef ::std::map< ::std::string, ::std::string> TAttributes;

struct TObject
{
    ::Ice::Int id;
    ::Ice::Int type;
    ::RoboCompCamera360RGB::TImage image;
    ::RoboCompVisualElementsPub::TAttributes attributes;
    ::RoboCompLidar3D::TDataImage maskpoints;
};

typedef ::std::vector<TObject> TObjects;

struct TData
{
    ::std::string publisher;
    ::RoboCompVisualElementsPub::TObjects objects;
    ::Ice::Long timestampimage;
    ::Ice::Long timestampgenerated;
    ::Ice::Float period;
};

}

namespace RoboCompVisualElementsPub
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompVisualElementsPub::VisualElementsPub::begin_setVisualObjects.
 * Create a wrapper instance by calling ::RoboCompVisualElementsPub::newCallback_VisualElementsPub_setVisualObjects.
 */
class Callback_VisualElementsPub_setVisualObjects_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_VisualElementsPub_setVisualObjects_Base> Callback_VisualElementsPub_setVisualObjectsPtr;

}

namespace IceProxy
{

namespace RoboCompVisualElementsPub
{

class VisualElementsPub : public virtual ::Ice::Proxy<VisualElementsPub, ::IceProxy::Ice::Object>
{
public:

    void setVisualObjects(const ::RoboCompVisualElementsPub::TData& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setVisualObjects(_iceI_begin_setVisualObjects(data, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setVisualObjects(const ::RoboCompVisualElementsPub::TData& data, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setVisualObjects(data, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setVisualObjects(const ::RoboCompVisualElementsPub::TData& data, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setVisualObjects(data, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setVisualObjects(const ::RoboCompVisualElementsPub::TData& data, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setVisualObjects(data, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setVisualObjects(const ::RoboCompVisualElementsPub::TData& data, const ::RoboCompVisualElementsPub::Callback_VisualElementsPub_setVisualObjectsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setVisualObjects(data, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_setVisualObjects(const ::RoboCompVisualElementsPub::TData& data, const ::Ice::Context& context, const ::RoboCompVisualElementsPub::Callback_VisualElementsPub_setVisualObjectsPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setVisualObjects(data, context, cb, cookie);
    }

    void end_setVisualObjects(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setVisualObjects(const ::RoboCompVisualElementsPub::TData&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompVisualElementsPub
{

class VisualElementsPub : public virtual ::Ice::Object
{
public:

    typedef VisualElementsPubPrx ProxyType;
    typedef VisualElementsPubPtr PointerType;

    virtual ~VisualElementsPub();

#ifdef ICE_CPP11_COMPILER
    VisualElementsPub() = default;
    VisualElementsPub(const VisualElementsPub&) = default;
    VisualElementsPub& operator=(const VisualElementsPub&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual void setVisualObjects(const TData& data, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_setVisualObjects(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const VisualElementsPub& lhs, const VisualElementsPub& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const VisualElementsPub& lhs, const VisualElementsPub& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompVisualElementsPub::TObject>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 84;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompVisualElementsPub::TObject, S>
{
    static void write(S* ostr, const ::RoboCompVisualElementsPub::TObject& v)
    {
        ostr->write(v.id);
        ostr->write(v.type);
        ostr->write(v.image);
        ostr->write(v.attributes);
        ostr->write(v.maskpoints);
    }
};

template<typename S>
struct StreamReader< ::RoboCompVisualElementsPub::TObject, S>
{
    static void read(S* istr, ::RoboCompVisualElementsPub::TObject& v)
    {
        istr->read(v.id);
        istr->read(v.type);
        istr->read(v.image);
        istr->read(v.attributes);
        istr->read(v.maskpoints);
    }
};

template<>
struct StreamableTraits< ::RoboCompVisualElementsPub::TData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 22;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompVisualElementsPub::TData, S>
{
    static void write(S* ostr, const ::RoboCompVisualElementsPub::TData& v)
    {
        ostr->write(v.publisher);
        ostr->write(v.objects);
        ostr->write(v.timestampimage);
        ostr->write(v.timestampgenerated);
        ostr->write(v.period);
    }
};

template<typename S>
struct StreamReader< ::RoboCompVisualElementsPub::TData, S>
{
    static void read(S* istr, ::RoboCompVisualElementsPub::TData& v)
    {
        istr->read(v.publisher);
        istr->read(v.objects);
        istr->read(v.timestampimage);
        istr->read(v.timestampgenerated);
        istr->read(v.period);
    }
};

}
/// \endcond

namespace RoboCompVisualElementsPub
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompVisualElementsPub::VisualElementsPub::begin_setVisualObjects.
 * Create a wrapper instance by calling ::RoboCompVisualElementsPub::newCallback_VisualElementsPub_setVisualObjects.
 */
template<class T>
class CallbackNC_VisualElementsPub_setVisualObjects : public Callback_VisualElementsPub_setVisualObjects_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_VisualElementsPub_setVisualObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElementsPub::VisualElementsPub::begin_setVisualObjects.
 */
template<class T> Callback_VisualElementsPub_setVisualObjectsPtr
newCallback_VisualElementsPub_setVisualObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VisualElementsPub_setVisualObjects<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElementsPub::VisualElementsPub::begin_setVisualObjects.
 */
template<class T> Callback_VisualElementsPub_setVisualObjectsPtr
newCallback_VisualElementsPub_setVisualObjects(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VisualElementsPub_setVisualObjects<T>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElementsPub::VisualElementsPub::begin_setVisualObjects.
 */
template<class T> Callback_VisualElementsPub_setVisualObjectsPtr
newCallback_VisualElementsPub_setVisualObjects(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VisualElementsPub_setVisualObjects<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElementsPub::VisualElementsPub::begin_setVisualObjects.
 */
template<class T> Callback_VisualElementsPub_setVisualObjectsPtr
newCallback_VisualElementsPub_setVisualObjects(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_VisualElementsPub_setVisualObjects<T>(instance, 0, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompVisualElementsPub::VisualElementsPub::begin_setVisualObjects.
 * Create a wrapper instance by calling ::RoboCompVisualElementsPub::newCallback_VisualElementsPub_setVisualObjects.
 */
template<class T, typename CT>
class Callback_VisualElementsPub_setVisualObjects : public Callback_VisualElementsPub_setVisualObjects_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_VisualElementsPub_setVisualObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElementsPub::VisualElementsPub::begin_setVisualObjects.
 */
template<class T, typename CT> Callback_VisualElementsPub_setVisualObjectsPtr
newCallback_VisualElementsPub_setVisualObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VisualElementsPub_setVisualObjects<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElementsPub::VisualElementsPub::begin_setVisualObjects.
 */
template<class T, typename CT> Callback_VisualElementsPub_setVisualObjectsPtr
newCallback_VisualElementsPub_setVisualObjects(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VisualElementsPub_setVisualObjects<T, CT>(instance, 0, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElementsPub::VisualElementsPub::begin_setVisualObjects.
 */
template<class T, typename CT> Callback_VisualElementsPub_setVisualObjectsPtr
newCallback_VisualElementsPub_setVisualObjects(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VisualElementsPub_setVisualObjects<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompVisualElementsPub::VisualElementsPub::begin_setVisualObjects.
 */
template<class T, typename CT> Callback_VisualElementsPub_setVisualObjectsPtr
newCallback_VisualElementsPub_setVisualObjects(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_VisualElementsPub_setVisualObjects<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
