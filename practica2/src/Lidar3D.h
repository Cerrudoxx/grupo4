//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `Lidar3D.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Lidar3D_h__
#define __Lidar3D_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompLidar3D
{

class Lidar3D;
class Lidar3DPrx;

}

namespace RoboCompLidar3D
{

struct TPoint
{
    float x;
    float y;
    float z;
    int intensity;
    float phi;
    float theta;
    float r;
    float distance2d;
    int pixelX;
    int pixelY;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const float&, const float&, const float&, const int&, const float&, const float&, const float&, const float&, const int&, const int&> ice_tuple() const
    {
        return std::tie(x, y, z, intensity, phi, theta, r, distance2d, pixelX, pixelY);
    }
};

using TPoints = ::std::vector<TPoint>;

using TFloatArray = ::std::vector<float>;

using TIntArray = ::std::vector<int>;

struct TDataImage
{
    long long int timestamp;
    ::RoboCompLidar3D::TFloatArray XArray;
    ::RoboCompLidar3D::TFloatArray YArray;
    ::RoboCompLidar3D::TFloatArray ZArray;
    ::RoboCompLidar3D::TIntArray XPixel;
    ::RoboCompLidar3D::TIntArray YPixel;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const long long int&, const ::RoboCompLidar3D::TFloatArray&, const ::RoboCompLidar3D::TFloatArray&, const ::RoboCompLidar3D::TFloatArray&, const ::RoboCompLidar3D::TIntArray&, const ::RoboCompLidar3D::TIntArray&> ice_tuple() const
    {
        return std::tie(timestamp, XArray, YArray, ZArray, XPixel, YPixel);
    }
};

struct TData
{
    ::RoboCompLidar3D::TPoints points;
    float period;
    long long int timestamp;

    /**
     * Obtains a tuple containing all of the struct's data members.
     * @return The data members in a tuple.
     */
    std::tuple<const ::RoboCompLidar3D::TPoints&, const float&, const long long int&> ice_tuple() const
    {
        return std::tie(points, period, timestamp);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompLidar3D
{

class Lidar3D : public virtual ::Ice::Object
{
public:

    using ProxyType = Lidar3DPrx;

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(::std::string id, const ::Ice::Current& current) const override;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current& current) const override;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual ::std::string ice_id(const ::Ice::Current& current) const override;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual TData getLidarData(::std::string name, float start, float len, int decimationDegreeFactor, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getLidarData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TDataImage getLidarDataArrayProyectedInImage(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getLidarDataArrayProyectedInImage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TData getLidarDataProyectedInImage(::std::string name, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getLidarDataProyectedInImage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TData getLidarDataWithThreshold2d(::std::string name, float distance, int decimationDegreeFactor, const ::Ice::Current& current) = 0;
    /// \cond INTERNAL
    bool _iceD_getLidarDataWithThreshold2d(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
    /// \endcond
};

}

namespace RoboCompLidar3D
{

class Lidar3DPrx : public virtual ::Ice::Proxy<Lidar3DPrx, ::Ice::ObjectPrx>
{
public:

    TData getLidarData(const ::std::string& name, float start, float len, int decimationDegreeFactor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompLidar3D::TData>(true, this, &Lidar3DPrx::_iceI_getLidarData, name, start, len, decimationDegreeFactor, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getLidarDataAsync(const ::std::string& name, float start, float len, int decimationDegreeFactor, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompLidar3D::TData>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompLidar3D::TData, P>(false, this, &Lidar3DPrx::_iceI_getLidarData, name, start, len, decimationDegreeFactor, context);
    }

    ::std::function<void()>
    getLidarDataAsync(const ::std::string& name, float start, float len, int decimationDegreeFactor,
                      ::std::function<void(::RoboCompLidar3D::TData)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompLidar3D::TData>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompLidar3D::Lidar3DPrx::_iceI_getLidarData, name, start, len, decimationDegreeFactor, context);
    }

    /// \cond INTERNAL
    void _iceI_getLidarData(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompLidar3D::TData>>&, const ::std::string&, float, float, int, const ::Ice::Context&);
    /// \endcond

    TDataImage getLidarDataArrayProyectedInImage(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompLidar3D::TDataImage>(true, this, &Lidar3DPrx::_iceI_getLidarDataArrayProyectedInImage, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getLidarDataArrayProyectedInImageAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompLidar3D::TDataImage>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompLidar3D::TDataImage, P>(false, this, &Lidar3DPrx::_iceI_getLidarDataArrayProyectedInImage, name, context);
    }

    ::std::function<void()>
    getLidarDataArrayProyectedInImageAsync(const ::std::string& name,
                                           ::std::function<void(::RoboCompLidar3D::TDataImage)> response,
                                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                           ::std::function<void(bool)> sent = nullptr,
                                           const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompLidar3D::TDataImage>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompLidar3D::Lidar3DPrx::_iceI_getLidarDataArrayProyectedInImage, name, context);
    }

    /// \cond INTERNAL
    void _iceI_getLidarDataArrayProyectedInImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompLidar3D::TDataImage>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    TData getLidarDataProyectedInImage(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompLidar3D::TData>(true, this, &Lidar3DPrx::_iceI_getLidarDataProyectedInImage, name, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getLidarDataProyectedInImageAsync(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompLidar3D::TData>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompLidar3D::TData, P>(false, this, &Lidar3DPrx::_iceI_getLidarDataProyectedInImage, name, context);
    }

    ::std::function<void()>
    getLidarDataProyectedInImageAsync(const ::std::string& name,
                                      ::std::function<void(::RoboCompLidar3D::TData)> response,
                                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                      ::std::function<void(bool)> sent = nullptr,
                                      const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompLidar3D::TData>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompLidar3D::Lidar3DPrx::_iceI_getLidarDataProyectedInImage, name, context);
    }

    /// \cond INTERNAL
    void _iceI_getLidarDataProyectedInImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompLidar3D::TData>>&, const ::std::string&, const ::Ice::Context&);
    /// \endcond

    TData getLidarDataWithThreshold2d(const ::std::string& name, float distance, int decimationDegreeFactor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompLidar3D::TData>(true, this, &Lidar3DPrx::_iceI_getLidarDataWithThreshold2d, name, distance, decimationDegreeFactor, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getLidarDataWithThreshold2dAsync(const ::std::string& name, float distance, int decimationDegreeFactor, const ::Ice::Context& context = ::Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompLidar3D::TData>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompLidar3D::TData, P>(false, this, &Lidar3DPrx::_iceI_getLidarDataWithThreshold2d, name, distance, decimationDegreeFactor, context);
    }

    ::std::function<void()>
    getLidarDataWithThreshold2dAsync(const ::std::string& name, float distance, int decimationDegreeFactor,
                                     ::std::function<void(::RoboCompLidar3D::TData)> response,
                                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                                     ::std::function<void(bool)> sent = nullptr,
                                     const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompLidar3D::TData>(std::move(response), std::move(ex), std::move(sent), this, &RoboCompLidar3D::Lidar3DPrx::_iceI_getLidarDataWithThreshold2d, name, distance, decimationDegreeFactor, context);
    }

    /// \cond INTERNAL
    void _iceI_getLidarDataWithThreshold2d(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompLidar3D::TData>>&, const ::std::string&, float, int, const ::Ice::Context&);
    /// \endcond

    /**
     * Obtains the Slice type ID of this interface.
     * @return The fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:

    /// \cond INTERNAL
    Lidar3DPrx() = default;
    friend ::std::shared_ptr<Lidar3DPrx> IceInternal::createProxy<Lidar3DPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
    /// \endcond
};

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits<::RoboCompLidar3D::TPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 40;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompLidar3D::TPoint, S>
{
    static void read(S* istr, ::RoboCompLidar3D::TPoint& v)
    {
        istr->readAll(v.x, v.y, v.z, v.intensity, v.phi, v.theta, v.r, v.distance2d, v.pixelX, v.pixelY);
    }
};

template<>
struct StreamableTraits<::RoboCompLidar3D::TDataImage>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompLidar3D::TDataImage, S>
{
    static void read(S* istr, ::RoboCompLidar3D::TDataImage& v)
    {
        istr->readAll(v.timestamp, v.XArray, v.YArray, v.ZArray, v.XPixel, v.YPixel);
    }
};

template<>
struct StreamableTraits<::RoboCompLidar3D::TData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompLidar3D::TData, S>
{
    static void read(S* istr, ::RoboCompLidar3D::TData& v)
    {
        istr->readAll(v.points, v.period, v.timestamp);
    }
};

}
/// \endcond

/// \cond INTERNAL
namespace RoboCompLidar3D
{

using Lidar3DPtr = ::std::shared_ptr<Lidar3D>;
using Lidar3DPrxPtr = ::std::shared_ptr<Lidar3DPrx>;

}
/// \endcond

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompLidar3D
{

class Lidar3D;
/// \cond INTERNAL
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< Lidar3D>&);
::IceProxy::Ice::Object* upCast(Lidar3D*);
/// \endcond

}

}

namespace RoboCompLidar3D
{

class Lidar3D;
/// \cond INTERNAL
::Ice::Object* upCast(Lidar3D*);
/// \endcond
typedef ::IceInternal::Handle< Lidar3D> Lidar3DPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompLidar3D::Lidar3D> Lidar3DPrx;
typedef Lidar3DPrx Lidar3DPrxPtr;
/// \cond INTERNAL
void _icePatchObjectPtr(Lidar3DPtr&, const ::Ice::ObjectPtr&);
/// \endcond

}

namespace RoboCompLidar3D
{

struct TPoint
{
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;
    ::Ice::Int intensity;
    ::Ice::Float phi;
    ::Ice::Float theta;
    ::Ice::Float r;
    ::Ice::Float distance2d;
    ::Ice::Int pixelX;
    ::Ice::Int pixelY;
};

typedef ::std::vector<TPoint> TPoints;

typedef ::std::vector< ::Ice::Float> TFloatArray;

typedef ::std::vector< ::Ice::Int> TIntArray;

struct TDataImage
{
    ::Ice::Long timestamp;
    ::RoboCompLidar3D::TFloatArray XArray;
    ::RoboCompLidar3D::TFloatArray YArray;
    ::RoboCompLidar3D::TFloatArray ZArray;
    ::RoboCompLidar3D::TIntArray XPixel;
    ::RoboCompLidar3D::TIntArray YPixel;
};

struct TData
{
    ::RoboCompLidar3D::TPoints points;
    ::Ice::Float period;
    ::Ice::Long timestamp;
};

}

namespace RoboCompLidar3D
{

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarData.
 * Create a wrapper instance by calling ::RoboCompLidar3D::newCallback_Lidar3D_getLidarData.
 */
class Callback_Lidar3D_getLidarData_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lidar3D_getLidarData_Base> Callback_Lidar3D_getLidarDataPtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataArrayProyectedInImage.
 * Create a wrapper instance by calling ::RoboCompLidar3D::newCallback_Lidar3D_getLidarDataArrayProyectedInImage.
 */
class Callback_Lidar3D_getLidarDataArrayProyectedInImage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lidar3D_getLidarDataArrayProyectedInImage_Base> Callback_Lidar3D_getLidarDataArrayProyectedInImagePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataProyectedInImage.
 * Create a wrapper instance by calling ::RoboCompLidar3D::newCallback_Lidar3D_getLidarDataProyectedInImage.
 */
class Callback_Lidar3D_getLidarDataProyectedInImage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lidar3D_getLidarDataProyectedInImage_Base> Callback_Lidar3D_getLidarDataProyectedInImagePtr;

/**
 * Base class for asynchronous callback wrapper classes used for calls to
 * IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataWithThreshold2d.
 * Create a wrapper instance by calling ::RoboCompLidar3D::newCallback_Lidar3D_getLidarDataWithThreshold2d.
 */
class Callback_Lidar3D_getLidarDataWithThreshold2d_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Lidar3D_getLidarDataWithThreshold2d_Base> Callback_Lidar3D_getLidarDataWithThreshold2dPtr;

}

namespace IceProxy
{

namespace RoboCompLidar3D
{

class Lidar3D : public virtual ::Ice::Proxy<Lidar3D, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompLidar3D::TData getLidarData(const ::std::string& name, ::Ice::Float start, ::Ice::Float len, ::Ice::Int decimationDegreeFactor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getLidarData(_iceI_begin_getLidarData(name, start, len, decimationDegreeFactor, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getLidarData(const ::std::string& name, ::Ice::Float start, ::Ice::Float len, ::Ice::Int decimationDegreeFactor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getLidarData(name, start, len, decimationDegreeFactor, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLidarData(const ::std::string& name, ::Ice::Float start, ::Ice::Float len, ::Ice::Int decimationDegreeFactor, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarData(name, start, len, decimationDegreeFactor, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLidarData(const ::std::string& name, ::Ice::Float start, ::Ice::Float len, ::Ice::Int decimationDegreeFactor, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarData(name, start, len, decimationDegreeFactor, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLidarData(const ::std::string& name, ::Ice::Float start, ::Ice::Float len, ::Ice::Int decimationDegreeFactor, const ::RoboCompLidar3D::Callback_Lidar3D_getLidarDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarData(name, start, len, decimationDegreeFactor, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLidarData(const ::std::string& name, ::Ice::Float start, ::Ice::Float len, ::Ice::Int decimationDegreeFactor, const ::Ice::Context& context, const ::RoboCompLidar3D::Callback_Lidar3D_getLidarDataPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarData(name, start, len, decimationDegreeFactor, context, cb, cookie);
    }

    ::RoboCompLidar3D::TData end_getLidarData(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getLidarData(const ::std::string&, ::Ice::Float, ::Ice::Float, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompLidar3D::TDataImage getLidarDataArrayProyectedInImage(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getLidarDataArrayProyectedInImage(_iceI_begin_getLidarDataArrayProyectedInImage(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getLidarDataArrayProyectedInImage(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getLidarDataArrayProyectedInImage(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLidarDataArrayProyectedInImage(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarDataArrayProyectedInImage(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLidarDataArrayProyectedInImage(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarDataArrayProyectedInImage(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLidarDataArrayProyectedInImage(const ::std::string& name, const ::RoboCompLidar3D::Callback_Lidar3D_getLidarDataArrayProyectedInImagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarDataArrayProyectedInImage(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLidarDataArrayProyectedInImage(const ::std::string& name, const ::Ice::Context& context, const ::RoboCompLidar3D::Callback_Lidar3D_getLidarDataArrayProyectedInImagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarDataArrayProyectedInImage(name, context, cb, cookie);
    }

    ::RoboCompLidar3D::TDataImage end_getLidarDataArrayProyectedInImage(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getLidarDataArrayProyectedInImage(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompLidar3D::TData getLidarDataProyectedInImage(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getLidarDataProyectedInImage(_iceI_begin_getLidarDataProyectedInImage(name, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getLidarDataProyectedInImage(const ::std::string& name, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getLidarDataProyectedInImage(name, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLidarDataProyectedInImage(const ::std::string& name, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarDataProyectedInImage(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLidarDataProyectedInImage(const ::std::string& name, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarDataProyectedInImage(name, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLidarDataProyectedInImage(const ::std::string& name, const ::RoboCompLidar3D::Callback_Lidar3D_getLidarDataProyectedInImagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarDataProyectedInImage(name, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLidarDataProyectedInImage(const ::std::string& name, const ::Ice::Context& context, const ::RoboCompLidar3D::Callback_Lidar3D_getLidarDataProyectedInImagePtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarDataProyectedInImage(name, context, cb, cookie);
    }

    ::RoboCompLidar3D::TData end_getLidarDataProyectedInImage(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getLidarDataProyectedInImage(const ::std::string&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompLidar3D::TData getLidarDataWithThreshold2d(const ::std::string& name, ::Ice::Float distance, ::Ice::Int decimationDegreeFactor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getLidarDataWithThreshold2d(_iceI_begin_getLidarDataWithThreshold2d(name, distance, decimationDegreeFactor, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getLidarDataWithThreshold2d(const ::std::string& name, ::Ice::Float distance, ::Ice::Int decimationDegreeFactor, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getLidarDataWithThreshold2d(name, distance, decimationDegreeFactor, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLidarDataWithThreshold2d(const ::std::string& name, ::Ice::Float distance, ::Ice::Int decimationDegreeFactor, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarDataWithThreshold2d(name, distance, decimationDegreeFactor, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLidarDataWithThreshold2d(const ::std::string& name, ::Ice::Float distance, ::Ice::Int decimationDegreeFactor, const ::Ice::Context& context, const ::Ice::CallbackPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarDataWithThreshold2d(name, distance, decimationDegreeFactor, context, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLidarDataWithThreshold2d(const ::std::string& name, ::Ice::Float distance, ::Ice::Int decimationDegreeFactor, const ::RoboCompLidar3D::Callback_Lidar3D_getLidarDataWithThreshold2dPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarDataWithThreshold2d(name, distance, decimationDegreeFactor, ::Ice::noExplicitContext, cb, cookie);
    }

    ::Ice::AsyncResultPtr begin_getLidarDataWithThreshold2d(const ::std::string& name, ::Ice::Float distance, ::Ice::Int decimationDegreeFactor, const ::Ice::Context& context, const ::RoboCompLidar3D::Callback_Lidar3D_getLidarDataWithThreshold2dPtr& cb, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getLidarDataWithThreshold2d(name, distance, decimationDegreeFactor, context, cb, cookie);
    }

    ::RoboCompLidar3D::TData end_getLidarDataWithThreshold2d(const ::Ice::AsyncResultPtr& result);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getLidarDataWithThreshold2d(const ::std::string&, ::Ice::Float, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    /**
     * Obtains the Slice type ID corresponding to this interface.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

protected:
    /// \cond INTERNAL

    virtual ::IceProxy::Ice::Object* _newInstance() const;
    /// \endcond
};

}

}

namespace RoboCompLidar3D
{

class Lidar3D : public virtual ::Ice::Object
{
public:

    typedef Lidar3DPrx ProxyType;
    typedef Lidar3DPtr PointerType;

    virtual ~Lidar3D();

#ifdef ICE_CPP11_COMPILER
    Lidar3D() = default;
    Lidar3D(const Lidar3D&) = default;
    Lidar3D& operator=(const Lidar3D&) = default;
#endif

    /**
     * Determines whether this object supports an interface with the given Slice type ID.
     * @param id The fully-scoped Slice type ID.
     * @param current The Current object for the invocation.
     * @return True if this object supports the interface, false, otherwise.
     */
    virtual bool ice_isA(const ::std::string& id, const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a list of the Slice type IDs representing the interfaces supported by this object.
     * @param current The Current object for the invocation.
     * @return A list of fully-scoped type IDs.
     */
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains a Slice type ID representing the most-derived interface supported by this object.
     * @param current The Current object for the invocation.
     * @return A fully-scoped type ID.
     */
    virtual const ::std::string& ice_id(const ::Ice::Current& current = ::Ice::emptyCurrent) const;

    /**
     * Obtains the Slice type ID corresponding to this class.
     * @return A fully-scoped type ID.
     */
    static const ::std::string& ice_staticId();

    virtual TData getLidarData(const ::std::string& name, ::Ice::Float start, ::Ice::Float len, ::Ice::Int decimationDegreeFactor, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getLidarData(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TDataImage getLidarDataArrayProyectedInImage(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getLidarDataArrayProyectedInImage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TData getLidarDataProyectedInImage(const ::std::string& name, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getLidarDataProyectedInImage(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    virtual TData getLidarDataWithThreshold2d(const ::std::string& name, ::Ice::Float distance, ::Ice::Int decimationDegreeFactor, const ::Ice::Current& current = ::Ice::emptyCurrent) = 0;
    /// \cond INTERNAL
    bool _iceD_getLidarDataWithThreshold2d(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

    /// \cond INTERNAL
    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);
    /// \endcond

protected:

    /// \cond STREAM
    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
    /// \endcond
};

/// \cond INTERNAL
inline bool operator==(const Lidar3D& lhs, const Lidar3D& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Lidar3D& lhs, const Lidar3D& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}
/// \endcond

}

/// \cond STREAM
namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompLidar3D::TPoint>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 40;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompLidar3D::TPoint, S>
{
    static void write(S* ostr, const ::RoboCompLidar3D::TPoint& v)
    {
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
        ostr->write(v.intensity);
        ostr->write(v.phi);
        ostr->write(v.theta);
        ostr->write(v.r);
        ostr->write(v.distance2d);
        ostr->write(v.pixelX);
        ostr->write(v.pixelY);
    }
};

template<typename S>
struct StreamReader< ::RoboCompLidar3D::TPoint, S>
{
    static void read(S* istr, ::RoboCompLidar3D::TPoint& v)
    {
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
        istr->read(v.intensity);
        istr->read(v.phi);
        istr->read(v.theta);
        istr->read(v.r);
        istr->read(v.distance2d);
        istr->read(v.pixelX);
        istr->read(v.pixelY);
    }
};

template<>
struct StreamableTraits< ::RoboCompLidar3D::TDataImage>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompLidar3D::TDataImage, S>
{
    static void write(S* ostr, const ::RoboCompLidar3D::TDataImage& v)
    {
        ostr->write(v.timestamp);
        ostr->write(v.XArray);
        ostr->write(v.YArray);
        ostr->write(v.ZArray);
        ostr->write(v.XPixel);
        ostr->write(v.YPixel);
    }
};

template<typename S>
struct StreamReader< ::RoboCompLidar3D::TDataImage, S>
{
    static void read(S* istr, ::RoboCompLidar3D::TDataImage& v)
    {
        istr->read(v.timestamp);
        istr->read(v.XArray);
        istr->read(v.YArray);
        istr->read(v.ZArray);
        istr->read(v.XPixel);
        istr->read(v.YPixel);
    }
};

template<>
struct StreamableTraits< ::RoboCompLidar3D::TData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompLidar3D::TData, S>
{
    static void write(S* ostr, const ::RoboCompLidar3D::TData& v)
    {
        ostr->write(v.points);
        ostr->write(v.period);
        ostr->write(v.timestamp);
    }
};

template<typename S>
struct StreamReader< ::RoboCompLidar3D::TData, S>
{
    static void read(S* istr, ::RoboCompLidar3D::TData& v)
    {
        istr->read(v.points);
        istr->read(v.period);
        istr->read(v.timestamp);
    }
};

}
/// \endcond

namespace RoboCompLidar3D
{

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarData.
 * Create a wrapper instance by calling ::RoboCompLidar3D::newCallback_Lidar3D_getLidarData.
 */
template<class T>
class CallbackNC_Lidar3D_getLidarData : public Callback_Lidar3D_getLidarData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TData&);

    CallbackNC_Lidar3D_getLidarData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Lidar3DPrx proxy = Lidar3DPrx::uncheckedCast(result->getProxy());
        TData ret;
        try
        {
            ret = proxy->end_getLidarData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarData.
 */
template<class T> Callback_Lidar3D_getLidarDataPtr
newCallback_Lidar3D_getLidarData(const IceUtil::Handle<T>& instance, void (T::*cb)(const TData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lidar3D_getLidarData<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarData.
 */
template<class T> Callback_Lidar3D_getLidarDataPtr
newCallback_Lidar3D_getLidarData(T* instance, void (T::*cb)(const TData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lidar3D_getLidarData<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarData.
 * Create a wrapper instance by calling ::RoboCompLidar3D::newCallback_Lidar3D_getLidarData.
 */
template<class T, typename CT>
class Callback_Lidar3D_getLidarData : public Callback_Lidar3D_getLidarData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TData&, const CT&);

    Callback_Lidar3D_getLidarData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Lidar3DPrx proxy = Lidar3DPrx::uncheckedCast(result->getProxy());
        TData ret;
        try
        {
            ret = proxy->end_getLidarData(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarData.
 */
template<class T, typename CT> Callback_Lidar3D_getLidarDataPtr
newCallback_Lidar3D_getLidarData(const IceUtil::Handle<T>& instance, void (T::*cb)(const TData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lidar3D_getLidarData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarData.
 */
template<class T, typename CT> Callback_Lidar3D_getLidarDataPtr
newCallback_Lidar3D_getLidarData(T* instance, void (T::*cb)(const TData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lidar3D_getLidarData<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataArrayProyectedInImage.
 * Create a wrapper instance by calling ::RoboCompLidar3D::newCallback_Lidar3D_getLidarDataArrayProyectedInImage.
 */
template<class T>
class CallbackNC_Lidar3D_getLidarDataArrayProyectedInImage : public Callback_Lidar3D_getLidarDataArrayProyectedInImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TDataImage&);

    CallbackNC_Lidar3D_getLidarDataArrayProyectedInImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Lidar3DPrx proxy = Lidar3DPrx::uncheckedCast(result->getProxy());
        TDataImage ret;
        try
        {
            ret = proxy->end_getLidarDataArrayProyectedInImage(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataArrayProyectedInImage.
 */
template<class T> Callback_Lidar3D_getLidarDataArrayProyectedInImagePtr
newCallback_Lidar3D_getLidarDataArrayProyectedInImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const TDataImage&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lidar3D_getLidarDataArrayProyectedInImage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataArrayProyectedInImage.
 */
template<class T> Callback_Lidar3D_getLidarDataArrayProyectedInImagePtr
newCallback_Lidar3D_getLidarDataArrayProyectedInImage(T* instance, void (T::*cb)(const TDataImage&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lidar3D_getLidarDataArrayProyectedInImage<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataArrayProyectedInImage.
 * Create a wrapper instance by calling ::RoboCompLidar3D::newCallback_Lidar3D_getLidarDataArrayProyectedInImage.
 */
template<class T, typename CT>
class Callback_Lidar3D_getLidarDataArrayProyectedInImage : public Callback_Lidar3D_getLidarDataArrayProyectedInImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TDataImage&, const CT&);

    Callback_Lidar3D_getLidarDataArrayProyectedInImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Lidar3DPrx proxy = Lidar3DPrx::uncheckedCast(result->getProxy());
        TDataImage ret;
        try
        {
            ret = proxy->end_getLidarDataArrayProyectedInImage(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataArrayProyectedInImage.
 */
template<class T, typename CT> Callback_Lidar3D_getLidarDataArrayProyectedInImagePtr
newCallback_Lidar3D_getLidarDataArrayProyectedInImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const TDataImage&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lidar3D_getLidarDataArrayProyectedInImage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataArrayProyectedInImage.
 */
template<class T, typename CT> Callback_Lidar3D_getLidarDataArrayProyectedInImagePtr
newCallback_Lidar3D_getLidarDataArrayProyectedInImage(T* instance, void (T::*cb)(const TDataImage&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lidar3D_getLidarDataArrayProyectedInImage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataProyectedInImage.
 * Create a wrapper instance by calling ::RoboCompLidar3D::newCallback_Lidar3D_getLidarDataProyectedInImage.
 */
template<class T>
class CallbackNC_Lidar3D_getLidarDataProyectedInImage : public Callback_Lidar3D_getLidarDataProyectedInImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TData&);

    CallbackNC_Lidar3D_getLidarDataProyectedInImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Lidar3DPrx proxy = Lidar3DPrx::uncheckedCast(result->getProxy());
        TData ret;
        try
        {
            ret = proxy->end_getLidarDataProyectedInImage(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataProyectedInImage.
 */
template<class T> Callback_Lidar3D_getLidarDataProyectedInImagePtr
newCallback_Lidar3D_getLidarDataProyectedInImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const TData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lidar3D_getLidarDataProyectedInImage<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataProyectedInImage.
 */
template<class T> Callback_Lidar3D_getLidarDataProyectedInImagePtr
newCallback_Lidar3D_getLidarDataProyectedInImage(T* instance, void (T::*cb)(const TData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lidar3D_getLidarDataProyectedInImage<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataProyectedInImage.
 * Create a wrapper instance by calling ::RoboCompLidar3D::newCallback_Lidar3D_getLidarDataProyectedInImage.
 */
template<class T, typename CT>
class Callback_Lidar3D_getLidarDataProyectedInImage : public Callback_Lidar3D_getLidarDataProyectedInImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TData&, const CT&);

    Callback_Lidar3D_getLidarDataProyectedInImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Lidar3DPrx proxy = Lidar3DPrx::uncheckedCast(result->getProxy());
        TData ret;
        try
        {
            ret = proxy->end_getLidarDataProyectedInImage(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataProyectedInImage.
 */
template<class T, typename CT> Callback_Lidar3D_getLidarDataProyectedInImagePtr
newCallback_Lidar3D_getLidarDataProyectedInImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const TData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lidar3D_getLidarDataProyectedInImage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataProyectedInImage.
 */
template<class T, typename CT> Callback_Lidar3D_getLidarDataProyectedInImagePtr
newCallback_Lidar3D_getLidarDataProyectedInImage(T* instance, void (T::*cb)(const TData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lidar3D_getLidarDataProyectedInImage<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class used for calls to
 * IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataWithThreshold2d.
 * Create a wrapper instance by calling ::RoboCompLidar3D::newCallback_Lidar3D_getLidarDataWithThreshold2d.
 */
template<class T>
class CallbackNC_Lidar3D_getLidarDataWithThreshold2d : public Callback_Lidar3D_getLidarDataWithThreshold2d_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const TData&);

    CallbackNC_Lidar3D_getLidarDataWithThreshold2d(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Lidar3DPrx proxy = Lidar3DPrx::uncheckedCast(result->getProxy());
        TData ret;
        try
        {
            ret = proxy->end_getLidarDataWithThreshold2d(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataWithThreshold2d.
 */
template<class T> Callback_Lidar3D_getLidarDataWithThreshold2dPtr
newCallback_Lidar3D_getLidarDataWithThreshold2d(const IceUtil::Handle<T>& instance, void (T::*cb)(const TData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lidar3D_getLidarDataWithThreshold2d<T>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataWithThreshold2d.
 */
template<class T> Callback_Lidar3D_getLidarDataWithThreshold2dPtr
newCallback_Lidar3D_getLidarDataWithThreshold2d(T* instance, void (T::*cb)(const TData&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Lidar3D_getLidarDataWithThreshold2d<T>(instance, cb, excb, sentcb);
}

/**
 * Type-safe asynchronous callback wrapper class with cookie support used for calls to
 * IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataWithThreshold2d.
 * Create a wrapper instance by calling ::RoboCompLidar3D::newCallback_Lidar3D_getLidarDataWithThreshold2d.
 */
template<class T, typename CT>
class Callback_Lidar3D_getLidarDataWithThreshold2d : public Callback_Lidar3D_getLidarDataWithThreshold2d_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const TData&, const CT&);

    Callback_Lidar3D_getLidarDataWithThreshold2d(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    /// \cond INTERNAL
    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        Lidar3DPrx proxy = Lidar3DPrx::uncheckedCast(result->getProxy());
        TData ret;
        try
        {
            ret = proxy->end_getLidarDataWithThreshold2d(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }
    /// \endcond

private:

    Response _response;
};

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataWithThreshold2d.
 */
template<class T, typename CT> Callback_Lidar3D_getLidarDataWithThreshold2dPtr
newCallback_Lidar3D_getLidarDataWithThreshold2d(const IceUtil::Handle<T>& instance, void (T::*cb)(const TData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lidar3D_getLidarDataWithThreshold2d<T, CT>(instance, cb, excb, sentcb);
}

/**
 * Creates a callback wrapper instance that delegates to your object.
 * Use this overload when your callback methods receive a cookie value.
 * @param instance The callback object.
 * @param cb The success method of the callback object.
 * @param excb The exception method of the callback object.
 * @param sentcb The sent method of the callback object.
 * @return An object that can be passed to an asynchronous invocation of IceProxy::RoboCompLidar3D::Lidar3D::begin_getLidarDataWithThreshold2d.
 */
template<class T, typename CT> Callback_Lidar3D_getLidarDataWithThreshold2dPtr
newCallback_Lidar3D_getLidarDataWithThreshold2d(T* instance, void (T::*cb)(const TData&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Lidar3D_getLidarDataWithThreshold2d<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
